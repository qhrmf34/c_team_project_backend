<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hotel_project.review_jpa.reviews.mapper.ReviewsMapper">

    <resultMap id="ReviewsDtoMap" type="com.hotel_project.review_jpa.reviews.dto.ReviewsDto">
        <id property="id" column="id"/>
        <result property="memberId" column="member_id"/>
        <result property="hotelId" column="hotel_id"/>
        <result property="reservationsId" column="reservations_id"/>
        <result property="rating" column="rating"/>
        <result property="reviewContent" column="review_content"/>
        <result property="reviewCard" column="review_card"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="memberName" column="memberName"/>
        <result property="profileImage" column="profileImage"/>
    </resultMap>

    <select id="findByHotelId" resultMap="ReviewsDtoMap">
        SELECT
            r.id,
            r.member_id,
            r.hotel_id,
            r.reservations_id,
            r.rating,
            r.review_content,
            r.review_card,
            r.created_at,
            r.updated_at,
            CONCAT(m.first_name, ' ', m.last_name) as memberName,
            mi.member_image_path as profileImage
        FROM reviews_tbl r
                 LEFT JOIN member_tbl m ON r.member_id = m.id
                 LEFT JOIN member_image_tbl mi ON m.id = mi.member_id AND mi.image_type = 'PROFILE'
        WHERE r.hotel_id = #{hotelId}
        ORDER BY r.created_at DESC
    </select>

    <select id="findFilteredReviews" resultMap="ReviewsDtoMap">
        SELECT
        r.id,
        r.member_id,
        r.hotel_id,
        r.reservations_id,
        r.rating,
        r.review_content,
        r.review_card,
        r.created_at,
        r.updated_at,
        CONCAT(m.first_name, ' ', m.last_name) as memberName,
        mi.member_image_path as profileImage
        FROM reviews_tbl r
        LEFT JOIN member_tbl m ON r.member_id = m.id
        LEFT JOIN member_image_tbl mi ON m.id = mi.member_id AND mi.image_type = 'PROFILE'
        WHERE r.hotel_id = #{hotelId}
        <if test="reviewCard != null">
            AND r.review_card = #{reviewCard}
        </if>
        <choose>
            <when test="sortBy == 'highest'">
                ORDER BY r.rating DESC, r.created_at DESC
            </when>
            <when test="sortBy == 'lowest'">
                ORDER BY r.rating ASC, r.created_at DESC
            </when>
            <otherwise>
                ORDER BY r.created_at DESC
            </otherwise>
        </choose>
    </select>

    <select id="getReviewCardStatsRaw" resultType="map">
        SELECT
            review_card as reviewCard,
            COUNT(*) as count
        FROM reviews_tbl
        WHERE hotel_id = #{hotelId}
        GROUP BY review_card
    </select>

    <select id="getHotelRatingStats" resultType="map">
        SELECT
            COALESCE(AVG(rating), 0.0) as averageRating,
            COUNT(*) as reviewCount
        FROM reviews_tbl
        WHERE hotel_id = #{hotelId}
    </select>

    <select id="existsByMemberIdAndHotelId" resultType="boolean">
        SELECT
            CASE
                WHEN COUNT(*) > 0 THEN TRUE
                ELSE FALSE
                END
        FROM reviews_tbl
        WHERE member_id = #{memberId}
          AND hotel_id = #{hotelId}
    </select>

    <!-- 특정 회원이 특정 호텔에 작성한 리뷰 조회 -->
    <select id="findMyReview" resultMap="ReviewsDtoMap">
        SELECT
            r.id,
            r.member_id,
            r.hotel_id,
            r.reservations_id,
            r.rating,
            r.review_content,
            r.review_card,
            r.created_at,
            r.updated_at,
            CONCAT(m.first_name, ' ', m.last_name) as memberName,
            mi.member_image_path as profileImage
        FROM reviews_tbl r
                 LEFT JOIN member_tbl m ON r.member_id = m.id
                 LEFT JOIN member_image_tbl mi ON m.id = mi.member_id AND mi.image_type = 'PROFILE'
        WHERE r.hotel_id = #{hotelId}
          AND r.member_id = #{memberId}
            LIMIT 1
    </select>


    <!-- checkReviewEligibility 쿼리-->
    <select id="checkReviewEligibility" resultType="map">
        SELECT
            CASE
                WHEN COUNT(rv.id) > 0 THEN 'ALREADY_WRITTEN'
                WHEN COUNT(res.id) = 0 THEN 'NO_BOOKING'
                WHEN MAX(res.check_out_date) >= CURDATE() THEN 'DATE_NOT_PASSED'
                WHEN MAX(p.payment_status) != 1 THEN 'NOT_PAID'
                ELSE 'ELIGIBLE'
                END as status,
            MAX(res.check_in_date) as checkIn,
            MAX(res.check_out_date) as checkOut,
            MAX(p.payment_status) as paymentStatus,
            MAX(res.id) as reservationId
        FROM reservations_tbl res
                 INNER JOIN room_tbl r ON res.room_id = r.id
                 LEFT JOIN payments_tbl p ON res.id = p.reservations_id
                 LEFT JOIN reviews_tbl rv ON r.hotel_id = rv.hotel_id
            AND res.member_id = rv.member_id
        WHERE r.hotel_id = #{hotelId}
          AND res.member_id = #{memberId}
    </select>

    <!-- 리뷰 등록 -->
    <insert id="insertReview" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO reviews_tbl (
            member_id,
            hotel_id,
            reservations_id,
            rating,
            review_content,
            review_card,
            created_at,
            updated_at
        ) VALUES (
                     #{memberId},
                     #{hotelId},
                     #{reservationsId},
                     #{rating},
                     #{reviewContent},
                     #{reviewCard},
                     NOW(),
                     NOW()
                 )
    </insert>

    <!-- 리뷰 수정 -->
    <update id="updateReview">
        UPDATE reviews_tbl
        SET rating = #{rating},
            review_content = #{reviewContent},
            review_card = #{reviewCard},
            updated_at = NOW()
        WHERE id = #{id}
          AND member_id = #{memberId}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview">
        DELETE FROM reviews_tbl
        WHERE id = #{id}
          AND member_id = #{memberId}
    </delete>

    <!-- 리뷰 작성자 확인 -->
    <select id="isReviewOwner" resultType="boolean">
        SELECT
            CASE
                WHEN COUNT(*) > 0 THEN TRUE
                ELSE FALSE
                END
        FROM reviews_tbl
        WHERE id = #{reviewId}
          AND member_id = #{memberId}
    </select>

</mapper>